containers:
  build-env:
    build_directory: .batect/build-env
    volumes:
      - local: .
        container: /code
        options: cached
      - type: cache
        name: go-cache
        container: /go
    working_directory: /code
    environment:
      GOCACHE: /go/cache
    run_as_current_user:
      enabled: true
      home_directory: /home/container-user

  terraform:
    build_directory: .batect/terraform
    build_args:
      CLOUD_SDK_VERSION: <{cloudSdkVersion}
    volumes:
      - local: .
        container: /code
        options: cached
      - local: .gcloud
        container: /root/.config/gcloud
        options: cached
    working_directory: /code
    environment:
      GOOGLE_PROJECT: <{gcpProject}
      GOOGLE_ORGANIZATION: <{gcpOrganizationId}
      GOOGLE_REGION: us-central1
      GOOGLE_BILLING_ACCOUNT_ID: <{gcpBillingAccountId}
      TF_CLI_ARGS_import: -state=terraform-<{gcpProject}.tfstate
      TF_CLI_ARGS_apply: -state=terraform-<{gcpProject}.tfstate
      TF_CLI_ARGS_plan: -state=terraform-<{gcpProject}.tfstate
      TF_CLI_ARGS_destroy: -state=terraform-<{gcpProject}.tfstate
      TF_CLI_ARGS_state_list: -state=terraform-<{gcpProject}.tfstate

  push-env:
    build_directory: .batect/push-env
    build_args:
      CLOUD_SDK_VERSION: <{cloudSdkVersion}
    volumes:
      - local: .
        container: /code
        options: cached
      - local: .gcloud
        container: /root/.config/gcloud
        options: cached
      - local: /var/run/docker.sock
        container: /var/run/docker.sock
    working_directory: /code
    environment:
      GOOGLE_PROJECT: <{gcpProject}

  app:
    build_directory: .batect/app
    volumes:
      - local: .creds/application_service_account_personal.json
        container: /creds/gcp.json
        options: ro
    environment:
      PORT: 8080
      GOOGLE_PROJECT: <{gcpProject}
      GOOGLE_APPLICATION_CREDENTIALS: /creds/gcp.json
      DATASET_ID: abacus
      SESSIONS_TABLE_ID: sessions

tasks:
  setup:
    description: Download all dependencies used by the application.
    group: Setup tasks
    run:
      container: build-env
      command: sh -c 'go mod download && go get github.com/onsi/ginkgo/ginkgo'

  build:
    description: Build the application.
    group: Build tasks
    run:
      container: build-env
      command: go build -o .batect/app/abacus ./server/cmd
      environment:
        CGO_ENABLED: 0
        GOOS: linux

  unitTest:
    description: Run the unit tests.
    group: Test tasks
    run:
      container: build-env
      command: ginkgo -tags unitTests -race -coverprofile=coverage.txt -covermode=atomic server/...

  continuousUnitTest:
    description: Run the unit tests, and re-run them when any code changes are detected.
    group: Test tasks
    run:
      container: build-env
      command: ginkgo watch -tags unitTests -race server/...

  shell:
    description: Start a shell in the development environment.
    group: Utility tasks
    run:
      container: build-env
      command: bash

  run:
    description: Run the application.
    group: Test tasks
    prerequisites:
      - build
    run:
      container: app
      ports:
        - local: 8080
          container: 8080

  lint:
    description: Check for linting errors in Golang files.
    group: Linting tasks
    run:
      container: build-env
      command: golangci-lint run server/...

  lintFix:
    description: Fix linting errors in Golang files.
    group: Linting tasks
    run:
      container: build-env
      command: golangci-lint run --fix server/...

  update:
    description: Update to latest minor or patch update of all dependencies.
    group: Dependency management tasks
    run:
      container: build-env
      command: sh -c 'go get -u && go mod tidy'

  checkLicenseHeader:
    description: Check that all files have the required license header.
    group: Linting tasks
    run:
      container: build-env
      command: ./scripts/check_licenses.sh

  setupTerraform:
    description: Initialise Terraform.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: sh -c './scripts/generate_vars.sh && terraform init -input=false -reconfigure -backend-config="bucket=$GOOGLE_PROJECT-terraform-state" -backend-config="credentials=../../.creds/gcp_service_account_${CLOUDSDK_ACTIVE_CONFIG_NAME}_infra.json"'
      working_directory: /code/infra/app
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}
        ROOT_DOMAIN: <{rootDomain}
        SUBDOMAIN: <{subdomain}

  applyTerraform:
    description: Run Terraform to provision infrastructure.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: sh -c "terraform apply -input=false -auto-approve && echo && ./scripts/wait_for_cloud_run.sh"
      working_directory: /code/infra/app
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}
        ROOT_DOMAIN: <{rootDomain}
        SUBDOMAIN: <{subdomain}

  planTerraform:
    description: Plan changes required to bring infrastructure to desired state.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: terraform plan -input=false
      working_directory: /code/infra/app
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}

  destroyTerraform:
    description: Run Terraform to provision infrastructure.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: terraform destroy -input=false -auto-approve
      working_directory: /code/infra/app
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}

  terraformShell:
    description: Start a shell in the Terraform environment.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: bash

  setupGCPServiceAccount:
    description: Store credentials used to access GCP when deploying the application.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: infra/scripts/setup_service_account.sh
      environment:
        GCP_SERVICE_ACCOUNT_EMAIL: $GCP_SERVICE_ACCOUNT_EMAIL
        GCP_SERVICE_ACCOUNT_KEY: $GCP_SERVICE_ACCOUNT_KEY
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}

  setupCloudflareKey:
    description: Store credentials used to access Cloudflare when deploying the application.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: sh -c "echo $CLOUDFLARE_KEY > .creds/cloudflare_key"
      environment:
        CLOUDFLARE_KEY: $CLOUDFLARE_KEY

  lintTerraform:
    description: Check for linting errors in Terraform files.
    group: Linting tasks
    run:
      container: terraform
      command: terraform fmt -diff -check -recursive infra

  lintFixTerraform:
    description: Fix linting errors in Terraform files.
    group: Linting tasks
    run:
      container: terraform
      command: terraform fmt -recursive infra

  setupGCPProject:
    description: Create the GCP project if it is missing.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: ./infra/scripts/setup_project.sh

  setupBootstrapTerraform:
    description: Initialise Terraform.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: sh -c "./scripts/generate_vars.sh && terraform init -input=false -reconfigure"
      working_directory: /code/infra/bootstrap
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: bootstrap-<{gcpProject}

  applyBootstrapTerraform:
    description: Run Terraform to provision infrastructure.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: sh -c "./scripts/generate_vars.sh && terraform apply -input=false -auto-approve"
      working_directory: /code/infra/bootstrap
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: bootstrap-<{gcpProject}

  planBootstrapTerraform:
    description: Plan changes required to bring infrastructure to desired state.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: sh -c "./scripts/generate_vars.sh && terraform plan -input=false"
      working_directory: /code/infra/bootstrap
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: bootstrap-<{gcpProject}

  destroyBootstrapTerraform:
    description: Run Terraform to provision infrastructure.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: sh -c "./scripts/generate_vars.sh && terraform destroy -input=false -auto-approve"
      working_directory: /code/infra/bootstrap
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: bootstrap-<{gcpProject}

  createGCPBootstrapServiceAccount:
    description: Create service account for use when bootstrapping an environment.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: infra/scripts/create_bootstrap_service_account.sh

  createGCPDeployerServiceAccount:
    description: Create service account for use when deploying to an environment.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: infra/scripts/create_deployer_service_account.sh
      environment:
        SERVICE_ACCOUNT_NAME: $SERVICE_ACCOUNT_NAME

  setupGCPBootstrapServiceAccount:
    description: Store credentials used to access GCP when bootstrapping the application, or checking the state of the bootstrapped infrastructure.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: infra/scripts/setup_service_account.sh
      environment:
        GCP_SERVICE_ACCOUNT_EMAIL: $GCP_SERVICE_ACCOUNT_EMAIL
        GCP_SERVICE_ACCOUNT_KEY: $GCP_SERVICE_ACCOUNT_KEY
        CLOUDSDK_ACTIVE_CONFIG_NAME: bootstrap-<{gcpProject}

  importBootstrapState:
    description: Import existing state of bootstrap infrastructure.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: ./scripts/import_state.sh
      working_directory: /code/infra/bootstrap
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: bootstrap-<{gcpProject}

  checkBootstrapState:
    description: Check that the bootstrap infrastructure matches the desired state.
    group: Infrastructure bootstrapping tasks
    run:
      container: terraform
      command: terraform plan -detailed-exitcode -input=false
      working_directory: /code/infra/bootstrap
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: bootstrap-<{gcpProject}

  pushImage:
    description: Push the application image to GCP.
    group: Deployment tasks
    run:
      container: push-env
      command: ./infra/scripts/push_image.sh
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}

  smokeTest:
    description: Run a smoke test against a deployed version of the app.
    group: Test tasks
    run:
      container: terraform
      command: ./scripts/smoke_test.sh
      environment:
        DOMAIN: <{subdomain}.<{rootDomain}
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}

config_variables:
  gcpProject:
    description: GCP project to use.

  gcpBillingAccountId:
    description: GCP billing account to use.

  gcpOrganizationId:
    description: GCP organisation to use.

  cloudSdkVersion:
    default: 287.0.0

  rootDomain:
    description: Root domain name registered with Cloudflare.
    default: batect.dev

  subdomain:
    description: Subdomain (under rootDomain) to host the application at.
