// Copyright 2019 Charles Korn.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// and the Commons Clause License Condition v1.0 (the "Condition");
// you may not use this file except in compliance with both the License and Condition.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// You may obtain a copy of the Condition at
//
//     https://commonsclause.com/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License and the Condition is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See both the License and the Condition for the specific language governing permissions and
// limitations under the License and the Condition.
// +build unitTests

package middleware

import (
	"context"
	"net/http"
	"net/http/httptest"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

// Based on https://cloud.google.com/run/docs/logging#writing_structured_logs and
// https://cloud.google.com/trace/docs/troubleshooting#force-trace
var _ = Describe("Tracing middleware", func() {
	var ctx context.Context
	var m http.Handler

	BeforeEach(func() {
		m = TracingMiddleware(http.HandlerFunc(func(_ http.ResponseWriter, r *http.Request) {
			ctx = r.Context()
		}))
	})

	Context("when the request contains a valid tracing ID", func() {
		BeforeEach(func() {
			req := httptest.NewRequest("GET", "/blah", nil)
			req.Header.Set("X-Cloud-Trace-Context", "105445aa7843bc8bf206b120001000/0;o=1")
			m.ServeHTTP(nil, req)
		})

		It("extracts the trace ID from the headers", func() {
			Expect(TraceIDFromContext(ctx)).To(Equal("105445aa7843bc8bf206b120001000"))
		})
	})

	Context("when the request contains an invalid tracing ID", func() {
		BeforeEach(func() {
			req := httptest.NewRequest("GET", "/blah", nil)
			req.Header.Set("X-Cloud-Trace-Context", "105445aa78")
			m.ServeHTTP(nil, req)
		})

		It("returns the original header value", func() {
			Expect(TraceIDFromContext(ctx)).To(Equal("105445aa78"))
		})
	})

	Context("when the request does not contain a tracing header", func() {
		BeforeEach(func() {
			req := httptest.NewRequest("GET", "/blah", nil)
			m.ServeHTTP(nil, req)
		})

		It("returns a generated trace ID", func() {
			Expect(TraceIDFromContext(ctx)).To(HavePrefix("autogenerated-"))
		})
	})
})
