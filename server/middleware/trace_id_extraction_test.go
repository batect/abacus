// Copyright 2019-2020 Charles Korn.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// and the Commons Clause License Condition v1.0 (the "Condition");
// you may not use this file except in compliance with both the License and Condition.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// You may obtain a copy of the Condition at
//
//     https://commonsclause.com/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License and the Condition is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See both the License and the Condition for the specific language governing permissions and
// limitations under the License and the Condition.

package middleware_test

import (
	"context"
	"net/http"
	"net/http/httptest"

	"github.com/batect/abacus/server/middleware"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"go.opentelemetry.io/otel/api/trace/tracetest"
)

// Based on https://cloud.google.com/run/docs/logging#writing_structured_logs and
// https://cloud.google.com/trace/docs/troubleshooting#force-trace
var _ = Describe("Trace ID extraction middleware", func() {
	var ctx context.Context
	var m http.Handler

	BeforeEach(func() {
		m = middleware.TraceIDExtractionMiddleware(http.HandlerFunc(func(_ http.ResponseWriter, r *http.Request) {
			ctx = r.Context()
		}))
	})

	Context("when the request contains an established trace", func() {
		var traceID string

		BeforeEach(func() {
			req := httptest.NewRequest("GET", "/blah", nil)
			req, traceID = addTraceToRequest(req)
			m.ServeHTTP(nil, req)
		})

		It("extracts the trace ID from the established trace", func() {
			Expect(middleware.TraceIDFromContext(ctx)).To(Equal(traceID))
		})
	})

	Context("when the request does not contain an established trace", func() {
		BeforeEach(func() {
			req := httptest.NewRequest("GET", "/blah", nil)
			m.ServeHTTP(nil, req)
		})

		It("returns a generated trace ID", func() {
			Expect(middleware.TraceIDFromContext(ctx)).To(HavePrefix("autogenerated-"))
		})
	})
})

func addTraceToRequest(req *http.Request) (*http.Request, string) {
	ctx, span := tracetest.NewTracerProvider().Tracer("Tracer").Start(req.Context(), "My test span")
	traceID := span.SpanContext().TraceID.String()
	req = req.WithContext(ctx)

	return req, traceID
}
